name: deploy dev

on:
  push:
    branches: [ main ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-1

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14.x'  # Use node 14 to avoid deployment error: Resource handler returned message: "Uploaded file must be a non-empty zip (Service: Lambda...

      - name: npm ci
        run: |
          node -v
          npm -v
#         artillery is recommended to be installed globally, v2.0.0-21 works on node 14
          npm install -g artillery@2.0.0-21
          npm ci

#       Avoid error "Found preexisting AWS CLI installation: /usr/local/aws-cli/v2/current. Please rerun install script with --update flag." by commenting this step
#      - name: install AWS CLI
#        run: |
#          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#          unzip awscliv2.zip
#          sudo ./aws/install
#          rm awscliv2.zip
#          rm -r ./aws

      - name: unit tests
        run: |
          CREDS=`aws sts assume-role --role-arn arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/ci-role --role-session-name=ci_user`
          export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
          export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
          export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`
          npm run exportEnv

          npm run test
      - name: integration tests
        run: |
          CREDS=`aws sts assume-role --role-arn arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/ci-role --role-session-name=ci_user`
          export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
          export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
          export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`
          npm run exportEnv

          npm run integration-test
      - name: deploy to dev
        run: |
          CREDS=`aws sts assume-role --role-arn arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/ci-role --role-session-name=ci_user`
          export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
          export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
          export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`
          npm run sls -- deploy
      - name: e2e tests
        run: |
          CREDS=`aws sts assume-role --role-arn arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/ci-role --role-session-name=ci_user`
          export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
          export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
          export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`
          npm run exportEnv

          npm run e2e-test
